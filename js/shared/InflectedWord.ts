"use strict";

import Word from './Word'
import Inflection from './Inflection'

/**
 * An inflection of a word generated by Inflection. The facts assumed to be required to know it are a grammar rule
 * defining how to inflect the form (e.g. by adding an ending) and the base form.
 */
export default class InflectedWord extends Word {
    inflection: Inflection
    
    /**
     * @param infinitive Word representing the base form. null if this IS the infinitive.
     */
    constructor(public jp, public stem, public infinitive: Word, public form) {
        super(jp, '');
        
        this.stem = stem
        this.infinitive = infinitive || this
        this.form = form
        this.en = {}
    }

    setForm(form) {
        this.form = form
    }

    /**
     * The knowledge required for an inflection is the base form of the word as well as any gramar rules used to
     * derive it.
     */
    visitFacts(visitor: (Fact) => any) {
        this.visitRequired(visitor)

        visitor(this.infinitive)
    }

    setInflection(inflection) {
        this.inflection = inflection;
    }

    visitAllInflections(visitor, excludeInherited) {
        if (!this.inflection) {
            throw new Error(this + ' is an inflected word without inflection.')
        }
        
        for (let inflectedWord of this.inflection.inflect(this.infinitive, this.stem, excludeInherited, {})) {
            visitor(inflectedWord);
        }
    }

    toFormString(useInfinitive) {
        return (useInfinitive ? this.infinitive : this).toString() + '@' + this.form
    }

    getId() {
        if (this.infinitive === this) {
            return super.getId() + '@' + this.form
        }
        else {
            return this.infinitive.getId()
        }
    }

    getJsonType() {
        return 'inflected'
    }

    toJson() {
        return {
            target: this.jp,
            en: this.en,
            stem: this.stem,
            inflection: (this.inflection ? this.inflection.id : undefined),
            type: this.getJsonType()
        }
    }
}