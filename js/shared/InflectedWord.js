"use strict";

require('./inheritance-clientserver.js')

var Word = require('./Word')
const Inflection = require('./Inflection')
var typecheck = require('./typecheck')

/**
 * An inflection of a word generated by Inflection. The facts assumed to be required to know it are a grammar rule
 * defining how to inflect the form (e.g. by adding an ending) and the base form; the word itself is not a fact.
 */
class InflectedWord extends Word {
    /**
     * @param infinitive Word representing the base form. null if this IS the infinitive.
     */
    constructor(jp, stem, infinitive, form) {
        super();
        
        this.jp = jp
        this.stem = stem
        this.infinitive = infinitive || this
        this.form = form
        this.en = {}
    }

    setForm(form) {
        this.form = form
    }

    /**
     * The knowledge required for an inflection is the base form of the word as well as any gramar rules used to
     * derive it.
     */
    visitFacts(visitor) {
        this.visitRequired(visitor)

        visitor(this.infinitive)
    }

    setInflection(inflection) {
        this.inflection = inflection;
    }

    visitAllInflections(visitor, excludeInherited) {
        if (!this.inflection) {
            throw new Error(this + ' is an inflected word without inflection.')
        }
        
        for (let inflectedWord of this.inflection.inflect(this.infinitive, this.stem, excludeInherited)) {
            visitor(inflectedWord);
        }
    }
    
    toFormString(useInfinitive) {
        return (useInfinitive ? this.infinitive : this).toString() + '@' + this.form
    }
}

module.exports = InflectedWord